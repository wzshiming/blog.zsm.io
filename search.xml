<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bridge - TCP 桥</title>
    <url>/2019/12/02/bridge/</url>
    <content><![CDATA[<p><a href="https://github.com/wzshiming/bridge"><img data-src="https://img.shields.io/github/stars/wzshiming/bridge.svg?style=social&label=Star" alt="GitHub stars">github.com/wzshiming/bridge</a></p>
<p>由于经常要 ssh 连接不同的服务器需要经过跳板机<br>ssh 的 ProxyCommand 使用不同协议使用不用的工具不同的语法格式<br>在多级代理上甚至不知道如何配置非常麻烦</p>
<p>写这个的初衷就是简化 ssh ProxyCommand 后面的命令格式以统一的格式处理不用的代理协议<br>后续发现可以写成一个通用的 tcp 代理</p>
<p>在监听端口的功能,一开始只支持 ssh ProxyCommand 的方式,使用 STDIO 和 ssh 通信<br>后面加上监听本地端口,甚至可以监听 ssh 服务器上的端口</p>
<h2 id="支持的协议"><a href="#支持的协议" class="headerlink" title="支持的协议"></a>支持的协议</h2><ul>
<li>http(s)-connect 拨号</li>
<li>socks4/4a 拨号</li>
<li>socks5/5h 拨号</li>
<li>ssh 拨号 &amp; 监听</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>映射 github.io:80 tcp 端口到本机的 8080 端口<br>由于是使用 ip 访问的 访问会返回 404 页面  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bridge -b :8080 -p github.io:80</span><br></pre></td></tr></table></figure>

<h3 id="各种协议的代理"><a href="#各种协议的代理" class="headerlink" title="各种协议的代理"></a>各种协议的代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bridge -b :8080 -p github.io:80 -p ssh://username:password@my_server:22</span><br><span class="line">bridge -b :8080 -p github.io:80 -p ssh://username@my_server:22?identity_file=~/.ssh/id_rsa</span><br><span class="line">bridge -b :8080 -p github.io:80 -p socks5://username:password@my_server:1080</span><br><span class="line">bridge -b :8080 -p github.io:80 -p http://username:password@my_server:8080</span><br><span class="line">bridge -b :8080 -p github.io:80 -p <span class="string">&#x27;cmd:nc %h %p&#x27;</span></span><br><span class="line">bridge -b :8080 -p github.io:80 -p <span class="string">&#x27;cmd:ssh sshserver nc %h %p&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="多级代理"><a href="#多级代理" class="headerlink" title="多级代理"></a>多级代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bridge -b :8080 -p github.io:80 -p http://username:password@my_server2:8080 -p http://username:password@my_server1:8080</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="监听-ssh-端口"><a href="#监听-ssh-端口" class="headerlink" title="监听 ssh 端口"></a>监听 ssh 端口</h3><p>也可以通过 ssh 监听端口 本地的端口映射到服务器的端口<br>由于 sshd 的限制只能监听 127.0.0.1 的端口<br>如果想提供对外的服务需要把 /etc/ssh/sshd_config 里的 GatewayPorts no 改成 yes 然后重新加载 sshd  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bridge -b :8080 -b ssh://username:password@my_server:22 -p 127.0.0.1:80</span><br></pre></td></tr></table></figure>

<h3 id="用作-ssh-代理"><a href="#用作-ssh-代理" class="headerlink" title="用作 ssh 代理"></a>用作 ssh 代理</h3><p>更多的时候我是用作 ssh 代理的<br>在 ~/.ssh/config  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ProxyCommand bridge -p %h:%p -p &quot;ssh://username@my_server?identity_file=~/.ssh/id_rsa&quot;</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">go get -v github.com/wzshiming/bridge/cmd/bridge</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 源的发行版指定</title>
    <url>/2021/01/17/centos_releasever/</url>
    <content><![CDATA[<p>/etc/yum/vars/releasever</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 静态 ip</title>
    <url>/2021/01/13/centos_static_ip/</url>
    <content><![CDATA[<h2 id="CentOS-7-静态-ip-配置"><a href="#CentOS-7-静态-ip-配置" class="headerlink" title="CentOS 7 静态 ip 配置"></a>CentOS 7 静态 ip 配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat /etc/sysconfig/network-scripts/ifcfg-ens192</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static # 这个标志着使用静态 ip</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens192</span><br><span class="line">UUID=0e999030-a255-4221-a06e-2a6fd6677419 # 不同机子uuid一样(虚拟机克隆) 会互相顶掉, 可以用 uuidgen 重新生成</span><br><span class="line">DEVICE=ens192</span><br><span class="line">ONBOOT=yes</span><br><span class="line">GATEWAY=10.7.0.1 # 网关</span><br><span class="line">IPADDR=10.7.111.13 # ip</span><br><span class="line">PREFIX=16 # 掩码位数</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">ZONE=public</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>operation</tag>
        <tag>ip</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Containerd 安装</title>
    <url>/2021/08/02/containerd/</url>
    <content><![CDATA[<h2 id="Containerd-安装"><a href="#Containerd-安装" class="headerlink" title="Containerd  安装"></a>Containerd  安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VERSION=1.5.4</span><br><span class="line">wget -c https://github.com/containerd/containerd/releases/download/v<span class="variable">$&#123;VERSION&#125;</span>/containerd-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz</span><br><span class="line">tar xvf containerd-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">mkdir /etc/containerd/ &amp;&amp; containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line">wget -c -O /etc/systemd/system/containerd.service https://raw.githubusercontent.com/containerd/containerd/main/containerd.service</span><br><span class="line">systemctl start containerd</span><br></pre></td></tr></table></figure>

<h2 id="Nerdctl-安装"><a href="#Nerdctl-安装" class="headerlink" title="Nerdctl 安装"></a>Nerdctl 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VERSION=0.11.0</span><br><span class="line">wget -c https://github.com/containerd/nerdctl/releases/download/v<span class="variable">$&#123;VERSION&#125;</span>/nerdctl-full-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz</span><br><span class="line">tar xvf nerdctl-full-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>operation</tag>
        <tag>note</tag>
        <tag>containerd</tag>
      </tags>
  </entry>
  <entry>
    <title>Crun - 根据正则生成密码字典</title>
    <url>/2019/02/12/crun/</url>
    <content><![CDATA[<p><a href="https://github.com/wzshiming/crun"><img data-src="https://img.shields.io/github/stars/wzshiming/crun.svg?style=social&label=Star" alt="GitHub stars">github.com/wzshiming/crun</a></p>
<h2 id="通常的生成密码字典"><a href="#通常的生成密码字典" class="headerlink" title="通常的生成密码字典"></a>通常的生成密码字典</h2><p>用处很简单就是根据规则生成密码<br>但是使用十分麻烦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 最小为1,最大为6 在abcdefg中所有可能的组合</span></span><br><span class="line">crunch 1 6 abcdefg</span><br><span class="line"><span class="comment"># 调用密码库 charset.lst， 生成最小为1，最大为8 所有可能的组合</span></span><br><span class="line">crunch 1 8 -f charset.lst mixalpha-numeric-all-space</span><br></pre></td></tr></table></figure>
<p>我第一想法为什么不能用 正则生成字典<br>谷歌度娘找了一圈可能真的没有<br>没有那就自己写一个呗</p>
<h2 id="这个工具的生成密码字典"><a href="#这个工具的生成密码字典" class="headerlink" title="这个工具的生成密码字典"></a>这个工具的生成密码字典</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 1到6位长度的数字所有可能性组合</span></span><br><span class="line">crun <span class="string">&quot;\d&#123;1,6&#125;&quot;</span></span><br><span class="line"><span class="comment"># 输出到 ditc.txt 文件</span></span><br><span class="line">crun <span class="string">&quot;\d&#123;1,6&#125;&quot;</span> &gt; ditc.txt</span><br><span class="line"><span class="comment"># 暴力美学</span></span><br><span class="line">crun <span class="string">&quot;(root|admin):[0-9]&#123;4,10&#125;&quot;</span></span><br><span class="line"><span class="comment"># !!!!! 注意如果量太大会超卡的</span></span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">go get -v github.com/wzshiming/crun/cmd/crun</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Ferry - kubernetes 跨集群通信组件</title>
    <url>/2022/02/24/ferry/</url>
    <content><![CDATA[<h2 id="Ferry-是什么呢"><a href="#Ferry-是什么呢" class="headerlink" title="Ferry 是什么呢"></a>Ferry 是什么呢</h2><p>官网 <span class="exturl" data-url="aHR0cHM6Ly9mZXJyeXByb3h5LmlvLw==">https://ferryproxy.io/<i class="fa fa-external-link-alt"></i></span></p>
<p>源码地址 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZlcnJ5cHJveHkvZmVycnk=">https://github.com/ferryproxy/ferry<i class="fa fa-external-link-alt"></i></span></p>
<p>Ferry 是为 Kubernetes 开发的一个多集群通信组件</p>
<p>Ferry 可以支持将一个集群的 Service 映射到另一个集群</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h1 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a>快速开始</h1><p>准备至少两个集群才能做演示</p>
<p>可以是一个节点的集群或者 Kind 起的集群但最少也要两个</p>
<h2 id="下载-ferryctl"><a href="#下载-ferryctl" class="headerlink" title="下载 ferryctl"></a>下载 ferryctl</h2><p>ferryctl 是 ferry 的安装运维工具</p>
<p>需要为每个集群的控制节点都安装一个 ferryctl</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZlcnJ5cHJveHkvZmVycnkvcmVsZWFzZXM=">https://github.com/ferryproxy/ferry/releases<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="初始化控制面集群"><a href="#初始化控制面集群" class="headerlink" title="初始化控制面集群"></a>初始化控制面集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在控制面集群执行</span></span><br><span class="line">ferryctl control-plane init</span><br></pre></td></tr></table></figure>

<h2 id="向控制面声明哪个数据面需要加入"><a href="#向控制面声明哪个数据面需要加入" class="headerlink" title="向控制面声明哪个数据面需要加入"></a>向控制面声明哪个数据面需要加入</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在控制平面执行，预连接其他数据平面</span></span><br><span class="line">ferryctl control-plane join cluster-1</span><br></pre></td></tr></table></figure>

<h2 id="数据面做好被控制面管控的准备"><a href="#数据面做好被控制面管控的准备" class="headerlink" title="数据面做好被控制面管控的准备"></a>数据面做好被控制面管控的准备</h2><p>上一个命令执行后, 会响应一个命令复制到数据面集群执行</p>
<h2 id="控制面开始管控数据面"><a href="#控制面开始管控数据面" class="headerlink" title="控制面开始管控数据面"></a>控制面开始管控数据面</h2><p>上一个命令执行后, 会响应一个命令复制到控制面集群执行</p>
<h2 id="规则配置"><a href="#规则配置" class="headerlink" title="规则配置"></a>规则配置</h2><p>测试应用需要提前部署并配置 Service</p>
<p>在控制面集群配置路由规则</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 映射 cluster-1 的 app-1.default.svc 映射到 control-plane 的 app-1.default.svc</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traffic.ferryproxy.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoutePolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ferry-rule</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ferry-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">exports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hubName:</span> <span class="string">cluster-1</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">app-1</span></span><br><span class="line">  <span class="attr">imports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hubName:</span> <span class="string">control-plane</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">app-1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>tools</tag>
        <tag>golang</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>生成新的 kubeconfig</title>
    <url>/2021/04/25/generate_kubeconfig/</url>
    <content><![CDATA[<p>主要记录一下自己写的拼凑 kubeconfig 的脚本<br>由于很难写成一个可定制化的东西, 当前先记录脚本按需求改改吧  </p>
<h2 id="使用-SA-的-Token"><a href="#使用-SA-的-Token" class="headerlink" title="使用 SA 的 Token"></a>使用 SA 的 Token</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KUBECONFIG=you_kubeconfig ./generate_kubeconfig_with_sa.sh &gt; new_kubecofnig</span></span><br><span class="line"></span><br><span class="line">NAME=<span class="variable">$&#123;NAME:-&quot;readonly-kubeconfig&quot;&#125;</span></span><br><span class="line">NAMESPACE=<span class="variable">$&#123;NAMESPACE:-&quot;default&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">kubectl apply -f - 1&gt;&amp;2 &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: ServiceAccount</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">  namespace: $&#123;NAMESPACE&#125;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: ClusterRole</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">rules:</span></span><br><span class="line"><span class="string">- apiGroups:</span></span><br><span class="line"><span class="string">  - &quot;*&quot;</span></span><br><span class="line"><span class="string">  resources:</span></span><br><span class="line"><span class="string">  - &quot;*&quot;</span></span><br><span class="line"><span class="string">  verbs:</span></span><br><span class="line"><span class="string">  - &quot;get&quot;</span></span><br><span class="line"><span class="string">  - &quot;list&quot;</span></span><br><span class="line"><span class="string">  - &quot;watch&quot;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: ClusterRoleBinding</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">roleRef:</span></span><br><span class="line"><span class="string">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">  kind: ClusterRole</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">subjects:</span></span><br><span class="line"><span class="string">  - kind: ServiceAccount</span></span><br><span class="line"><span class="string">    name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">    namespace: $&#123;NAMESPACE&#125;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">SECRET_NAME=<span class="string">&quot;<span class="subst">$(kubectl get sa -n $&#123;NAMESPACE&#125; $&#123;NAME&#125; -o &#x27;jsonpath=&#123;$.secrets[0].name&#125;&#x27;)</span>&quot;</span></span><br><span class="line">CA_CRT=<span class="string">&quot;<span class="subst">$(kubectl get secret -n $&#123;NAMESPACE&#125; $&#123;SECRET_NAME&#125; -o &#x27;jsonpath=&#123;$.data.ca\.crt&#125;&#x27;)</span>&quot;</span></span><br><span class="line">TOKEN=<span class="string">&quot;<span class="subst">$(kubectl get secret -n $&#123;NAMESPACE&#125; $&#123;SECRET_NAME&#125; -o &#x27;jsonpath=&#123;$.data.token&#125;&#x27; | base64 --decode)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">APISERVER_ADDRESS=<span class="variable">$&#123;APISERVER_ADDRESS:-&quot;$(kubectl get cm -n kube-public cluster-info -o yaml | grep &#x27;server: &#x27; | sed &#x27;s/server: //&#x27; | sed &#x27;s/ *//g&#x27;)&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Config</span></span><br><span class="line"><span class="string">current-context: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">clusters:</span></span><br><span class="line"><span class="string">- cluster:</span></span><br><span class="line"><span class="string">    certificate-authority-data: $&#123;CA_CRT&#125;</span></span><br><span class="line"><span class="string">    server: $&#123;APISERVER_ADDRESS&#125;</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">contexts:</span></span><br><span class="line"><span class="string">- context:</span></span><br><span class="line"><span class="string">    cluster: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">    user: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">users:</span></span><br><span class="line"><span class="string">- name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">  user:</span></span><br><span class="line"><span class="string">    token: $&#123;TOKEN&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>


<h2 id="使用-CSR-签证书"><a href="#使用-CSR-签证书" class="headerlink" title="使用 CSR 签证书"></a>使用 CSR 签证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KUBECONFIG=you_kubeconfig ./generate_kubeconfig_with_csr.sh &gt; new_kubecofnig</span></span><br><span class="line"></span><br><span class="line">NAME=<span class="variable">$&#123;NAME:-&quot;readonly-kubeconfig&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">openssl genrsa -out <span class="string">&quot;<span class="variable">$&#123;NAME&#125;</span>.key&quot;</span> 2048</span><br><span class="line">CSR=<span class="string">&quot;<span class="subst">$(openssl req -new -key <span class="string">&quot;<span class="variable">$&#123;NAME&#125;</span>.key&quot;</span> -subj <span class="string">&quot;/CN=<span class="variable">$&#123;NAME&#125;</span>&quot;</span> | base64 | tr -d &#x27;\n&#x27;)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">kubectl delete csr <span class="string">&quot;<span class="variable">$&#123;NAME&#125;</span>&quot;</span> 1&gt;&amp;2</span><br><span class="line"></span><br><span class="line">kubectl apply -f - 1&gt;&amp;2 &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: ClusterRole</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">rules:</span></span><br><span class="line"><span class="string">- apiGroups:</span></span><br><span class="line"><span class="string">  - &quot;*&quot;</span></span><br><span class="line"><span class="string">  resources:</span></span><br><span class="line"><span class="string">  - &quot;*&quot;</span></span><br><span class="line"><span class="string">  verbs:</span></span><br><span class="line"><span class="string">  - &quot;get&quot;</span></span><br><span class="line"><span class="string">  - &quot;list&quot;</span></span><br><span class="line"><span class="string">  - &quot;watch&quot;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: ClusterRoleBinding</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">roleRef:</span></span><br><span class="line"><span class="string">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">  kind: ClusterRole</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">subjects:</span></span><br><span class="line"><span class="string">- kind: User</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: certificates.k8s.io/v1beta1</span></span><br><span class="line"><span class="string">kind: CertificateSigningRequest</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  request: $&#123;CSR&#125;</span></span><br><span class="line"><span class="string">  signerName: kubernetes.io/kube-apiserver-client</span></span><br><span class="line"><span class="string">  usages:</span></span><br><span class="line"><span class="string">  - client auth</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">kubectl certificate approve <span class="string">&quot;<span class="variable">$&#123;NAME&#125;</span>&quot;</span> 1&gt;&amp;2</span><br><span class="line"></span><br><span class="line">CA_CRT=<span class="string">&quot;<span class="subst">$(kubectl get cm -n kube-public kube-root-ca.crt -o &#x27;jsonpath=&#123;$.data.ca\.crt&#125;&#x27; | base64 | tr -d &#x27;\n&#x27;)</span>&quot;</span></span><br><span class="line">CLIENT_CRT=<span class="string">&quot;<span class="subst">$(kubectl get csr <span class="string">&quot;<span class="variable">$&#123;NAME&#125;</span>&quot;</span> -o jsonpath=&#x27;&#123;$.status.certificate&#125;&#x27;)</span>&quot;</span></span><br><span class="line">CLIENT_KEY=<span class="string">&quot;<span class="subst">$(cat $&#123;NAME&#125;.key | base64 | tr -d &#x27;\n&#x27;)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">APISERVER_ADDRESS=<span class="variable">$&#123;APISERVER_ADDRESS:-&quot;$(kubectl get cm -n kube-public cluster-info -o yaml | grep &#x27;server: &#x27; | sed &#x27;s/server: //&#x27; | sed &#x27;s/ *//g&#x27;)&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Config</span></span><br><span class="line"><span class="string">current-context: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">clusters:</span></span><br><span class="line"><span class="string">- cluster:</span></span><br><span class="line"><span class="string">    certificate-authority-data: $&#123;CA_CRT&#125;</span></span><br><span class="line"><span class="string">    server: $&#123;APISERVER_ADDRESS&#125;</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">contexts:</span></span><br><span class="line"><span class="string">- context:</span></span><br><span class="line"><span class="string">    cluster: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">    user: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">  name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">users:</span></span><br><span class="line"><span class="string">- name: $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">  user:</span></span><br><span class="line"><span class="string">    client-certificate-data: $&#123;CLIENT_CRT&#125;</span></span><br><span class="line"><span class="string">    client-key-data: $&#123;CLIENT_KEY&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>生成 csr 的 -subj 的参数, CN 字段作为 User， O 字段作为 Group</p>
<h2 id="使用-ca-私钥签证书"><a href="#使用-ca-私钥签证书" class="headerlink" title="使用 ca 私钥签证书"></a>使用 ca 私钥签证书</h2><p>主体流程同上一个, 唯一不同的就是不再使用 k8s 的 CSR 资源签证书, 而是直接使用集群的 ca 私钥签. 对于权限需要较高, 不推荐使用.</p>
]]></content>
      <tags>
        <tag>golang</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2019/02/11/hello-hexo/</url>
    <content><![CDATA[<p>开始用 Hexo<br>搭建我的技术博客<br>养成写博客的习惯<br>之前的写的太丑放弃了好几次<br>新年新 Flag </p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/02/11/hello-world/</url>
    <content><![CDATA[<p>按照惯例 helloworld</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc main.c -o main &amp;&amp; ./main</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>在本地使用远端的 docker 和 k8s</title>
    <url>/2021/01/25/proxy_k8s_client/</url>
    <content><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d6c2hpbWluZy9icmlkZ2U=">https://github.com/wzshiming/bridge<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Docker-连接代理"><a href="#Docker-连接代理" class="headerlink" title="Docker 连接代理"></a>Docker 连接代理</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 代理远端的 docker 到本地的 2376 端口</span></span><br><span class="line">bridge -b &#x27;tcp://127.0.0.1:2376&#x27; -p &#x27;unix:///var/run/docker.sock&#x27; -p nc: -p &#x27;ssh://root@hostname?identity_file=~/.ssh/id_rsa&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量, 新开终端执行 docker 命令</span></span><br><span class="line">DOCKER_HOST=tcp://127.0.0.1:2376 docker ps</span><br></pre></td></tr></table></figure>

<h2 id="k8s-连接代理"><a href="#k8s-连接代理" class="headerlink" title="k8s 连接代理"></a>k8s 连接代理</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 代理远端的 k8s 到本地的 8000 端口</span></span><br><span class="line">bridge -b &#x27;tcp://127.0.0.1:8000&#x27; -p - -p &#x27;ssh://root@hostname?identity_file=~/.ssh/id_rsa&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量, 新开终端执行 kubectl 命令</span></span><br><span class="line">ALL_PROXY=127.0.0.1:8000 kubectl get node</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
</search>
